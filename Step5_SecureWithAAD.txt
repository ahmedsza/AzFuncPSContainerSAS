
# thanks to Matt Ruma - code from http://www.mattruma.com/adventures-in-azure-imperative-deployment-of-an-app-service-and-authentication-with-azure-active-directory/
# very minor changes made.
# this will setup Easy Auth for the Function using AAD

$WebAppName='azpsfuncapp01'
$ResourceGroupName='AzPSFunctionSAS-rg'
$App = (az ad app create `
        --display-name $WebAppName `
        --identifier-uris "https://$($WebAppName).azurewebsites.net" `
        --reply-urls  "https://$($WebAppName).azurewebsites.net/.auth/login/aad/callback" `
        --homepage "https://$($WebAppName).azurewebsites.net" -o json)

$AppObject = $App | ConvertFrom-Json;

# Get service principal
$ServicePrincipal = (az ad sp show --id $AppObject.appId)

If (!$ServicePrincipal) {
    # Create service principal for the app registration
    az ad sp create --id $AppObject.appId
}

# Get app permissions
$AppPermissions = (az ad app permission list --id $AppObject.appId --query "[?resourceAppId=='00000002-0000-0000-c000-000000000000'].resourceAccess[].id")

$AppPermissionsObject = $AppPermissions | ConvertFrom-Json;

$ActiveDirectoryApiId = "00000002-0000-0000-c000-000000000000"
$UserReadScopeId = "311a71cc-e848-46a1-bdf8-97ff7156d8e6"

If (!$AppPermissionsObject -or !$AppPermissionsObject.Contains($UserReadScope)) {
    # Create the api permission User.Read that is required to sign in the user
    az ad app permission add --id $AppObject.appId --api $ActiveDirectoryApiId --api-permissions "$($UserReadScopeId)=Scope"
}

# Get the app registration
$AzAdApplication = Get-AzADApplication -DisplayName $WebAppName

# Generate a password that will be used for the client secret
$Password = ([char[]]([char]65..[char]90) + ([char[]]([char]97..[char]122)) + 0..9 | Sort-Object { Get-Random })[0..30] + ("!=") -Join ""

# Add or append the client secret to the app registration
az ad app credential reset --id $AzAdApplication.ObjectId --password $Password --end-date "12/31/2299"

# Get the account so we can access the tenantId
$Account = (az account show -o json)

# Convert the account to an object so we can easily work with the properties
$AccountObject = $Account | ConvertFrom-Json

# Update the web app authentication and enabled it
az webapp auth update -n $WebAppName -g $ResourceGroupName --enabled true --action LoginWithAzureActiveDirectory --aad-client-id $AzAdApplication.ApplicationId --aad-client-secret $Password --aad-allowed-token-audiences "https://$($WebAppName).azurewebsites.net" --aad-token-issuer-url "https://sts.windows.net/$($AccountObject.tenantId)/"
